#include "callbacks.h"

void new_domain_cb(void){
	printf("New Domain Callback Fired\n");
	void gui_create_new_domain();
}

void provision_domain_cb(void){
	printf("Provisioning New Samba Domain\n");

/*	char *command[];
	command = ""

	popen(command, "r");*/
}

void add_new_share_cb(GtkGrid *share_grid_holder){

	printf("Making New Samba Share\n");
	struct share *new_share = malloc (sizeof (struct share));

	new_share->share_grid = GTK_GRID(gtk_grid_new());

	GtkWidget *new_share_storage_grid;
	gtk_builder_add_from_file (builder, "gsamba.gtkbuilder", NULL);
	new_share_storage_grid = GTK_WIDGET(gtk_builder_get_object(builder, "share_entry_page"));

	printf("Grid\n");
	if(prev_share == NULL){
		printf("Previous Share is null, binding undernearth the Add Share Button\n");
		gtk_grid_attach (GTK_GRID(new_share_storage_grid), GTK_WIDGET(new_share->share_grid), 0, 0, 1, 1);
	} else {
		printf("Previous Share Exists, binding underneath previous share.\n");
		gtk_grid_attach (GTK_GRID(new_share_storage_grid), GTK_WIDGET(new_share->share_grid), 0, (g_slist_length (samba_share_list)), 1, 1);
	}
	samba_share_list = g_slist_append (samba_share_list, new_share);
	prev_share = new_share;

	printf("Connecting Signals\n");
        gtk_builder_connect_signals(builder, NULL);

	printf("Postgrid\n");
        gtk_widget_show_all(new_share_storage_grid);
	printf("There are %d shares in the list\n", (g_slist_length (samba_share_list)));
}

void save_new_share_cb(void){

}
